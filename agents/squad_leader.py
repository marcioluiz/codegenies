"""
squad_leader.py

Este arquivo define a classe para agentes Líderes de Equipe. 
A classe herda da classe base definida em `base_agent.py` e 
implementa métodos específicos para as suas tarefas.

Classes:

- Squad Leader: Classe do agente (Líder de Equipe).
  - __init__(self, model, [name], interactive=False): Inicializa o agente.
    - model (Ollama): Modelo de linguagem a ser utilizado pelo agente.
    - name (str): Nome do agente (apenas para Developer).
    - interactive (bool): Define se o processo será interativo.

English:

This file defines the class for Team Leader agents. 
The class inherits from the base class defined in `base_agent.py` and 
implements specific methods for your tasks.

Classes:

- Squad Leader: Agent class (Team Leader).
  - __init__(self, model, [name], interactive=False): Initializes the agent.
    - model (Ollama): Language model to be used by the agent.
    - name (str): Agent name (only for Developer).
    - interactive (bool): Defines whether the process will be interactive.
"""
import os
from .base_agent import BaseAgent
import json
from prompt_templates.squad_leader_templates import (
    general_report_instructions,
    backend_backlog_model,
    backend_instructions,
    frontend_backlog_model,
    frontend_instructions,
    tests_backlog_model,
    tests_instructions
)

class SquadLeader(BaseAgent):
    """
    Inicializa o agente SquadLeader.
    Args:
        - model (Ollama): Modelo de linguagem a ser utilizado pelo líder de equipe.
        - interactive (bool): Define se o processo será interativo.
    
    English:

    Initializes the SquadLeader agent.
    Args:
        - model (Ollama): Language model to be used by the team leader.
        - interactive (bool): Defines whether the process will be interactive.
    """
    def __init__(self, llm, interactive=True):
        super().__init__("Líder de Equipe", llm)
        self.interactive = interactive

    def generate_general_report(self, analyst_report):
        """
        Gera o relatório geral do projeto.

        Args:
            - analyst_report (str): Relatório inicial gerado pelo analista.

        English:

        Generates the project general report.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{analyst_report}\n\n{general_report_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_backend_backlog(self, analyst_report):
        """
        Gera o backlog de tarefas de backend.

        Args:
            - analyst_report (str): Relatório inicial gerado pelo analista.

        English:

        Generates the backend task backlog.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{backend_backlog_model}\n\n{analyst_report}\n\n{backend_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_frontend_backlog(self, analyst_report):
        """
        Gera o backlog de tarefas de frontend.

        Args:
            - analyst_report (str): Relatório inicial gerado pelo analista.

        English:

        Generates the frontend task backlog.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{frontend_backlog_model}\n\n{analyst_report}\n\n{frontend_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_test_backlog(self, analyst_report):
        """
        Gera o backlog de tarefas de testes.

        Args:
            - analyst_report (str): Relatório inicial gerado pelo analista.

        English:

        Generates the backlog of testing tasks.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{tests_backlog_model}\n\n{analyst_report}\n\n{tests_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def _parse_response(self, response):
        # Se a resposta for uma string simples, apenas retorne-a
        # If the response is a simple string, just return it
        if isinstance(response, str):
            return {"Relatório Geral": response}
        # Se for um dicionário JSON válido, retorne-o diretamente
        # If it is a valid JSON dictionary, return it directly
        elif isinstance(response, dict):
            return response
        # Caso contrário, retorne um dicionário com a resposta como valor
        # Otherwise, return a dictionary with the answer as value
        else:
            return {"Relatório Geral": response}
        
    def get_source_code(self):
        # Obtém o código-fonte da classe base
        # Se a resposta for uma string simples ela é retornada
        # Get the source code of the base class
        # If the response is a simple string it is returned
        return super().get_source_code() 
