"""
squad_leader.py

This file defines the class for Team Leader agents. 
The class inherits from the base class defined in `base_agent.py` and 
implements specific methods for your tasks.

Classes:

- Squad Leader: Agent class (Team Leader).
  - __init__(self, model, [name], interactive=False): Initializes the agent.
    - model (Ollama): Language model to be used by the agent.
    - name (str): Agent name (only for Developer).
    - interactive (bool): Defines whether the process will be interactive.
"""
from .base_agent import BaseAgent
from .prompt_templates.squad_leader_prompts import SquadLeaderPrompts
from utils.translation_utils import translate_string

class SquadLeader(BaseAgent):
    """
    Initializes the SquadLeader agent.
    Args:
        - model (Ollama): Language model to be used by the team leader.
        - interactive (bool): Defines whether the process will be interactive.
    """
    def __init__(self, name, llm, language, interactive):
        super().__init__(name, llm, language, interactive)
        self.prompts = SquadLeaderPrompts()

    def generate_general_report(self, analyst_report):
        """
        Generates the project general report.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        language = self.language        
        prompt = f"{analyst_report}\n\n{self.prompts.get_general_report_instructions(language)}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_backend_backlog(self, analyst_report):
        """
        Generates the backend task backlog.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{self.prompts.backend_backlog_model}\n\n{analyst_report}\n\n{self.prompts.backend_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_frontend_backlog(self, analyst_report):
        """
        Generates the frontend task backlog.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{self.prompts.frontend_backlog_model}\n\n{analyst_report}\n\n{self.prompts.frontend_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def generate_test_backlog(self, analyst_report):
        """
        Generates the backlog of testing tasks.

        Args:
            - analyst_report (str): Initial report generated by the analyst.
        """
        prompt = f"{self.prompts.tests_backlog_model}\n\n{analyst_report}\n\n{self.prompts.tests_instructions}"
        response = self.evaluate(prompt)
        if self.interactive:
            final_response = self.interact(response)
        else:
            final_response = response
        return self._parse_response(final_response)

    def _parse_response(self, response):
        # If the response is a simple string, just return it
        if isinstance(response, str):
            translated_report_key = translate_string("squad_leader","translated_report_key", self.language)
            return {translated_report_key: response}
        # If it is a valid JSON dictionary, return it directly
        elif isinstance(response, dict):
            return response
        # Otherwise, return a dictionary with the answer as value
        else:
            translated_report_key = translate_string("squad_leader","translated_report_key", self.language)
            return {translated_report_key: response}
        
    def get_source_code(self):
        # Get the source code of the base class
        # If the response is a simple string it is returned
        return super().get_source_code() 
