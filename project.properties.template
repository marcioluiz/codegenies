# Analyst Properties File
# Project data
# title=#Project Title
# description=#Description of the project.
# author=#Information about the project authors.
# technical_details=#General technical details of the project. 
# backend_technology=#Description of the project's backend technology.
# frontend_technology=#Description of the project's frontend technology.
[project]
title=Youtube Clone
description=Create a web application project, YouTube clone, which should be a simple copy of the Youtube application. The YouTube clone application would have the main objective of offering a robust and scalable video sharing platform. On the backend, it would be developed with FastAPI, using Python to create a RESTful API that manages users, videos, comments and likes. Video storage would be handled by a cloud storage service like AWS S3, integrated via boto3. For authentication, OAuth2 would be implemented with JWT to ensure security and access control. On the frontend, using Next.js with React would provide a responsive and fluid user experience, with dynamic pages for navigation between videos, personalized feeds and suggestions based on viewing preferences. Additional features would include a customizable video player, recommendation system using machine learning algorithms, and integration with external APIs for content optimization and performance analysis. On the backend, the YouTube clone using FastAPI would be structured to provide a wide range of video-centric services. The RESTful API would be designed to manage not only users and authentication, but also handle uploading, storing, and streaming videos. Using libraries like boto3, videos would be securely stored on cloud services like AWS S3, allowing for scalability and redundancy. For video streaming, a robust solution would be implemented that supports different resolutions and formats, optimizing delivery based on user bandwidth. Authentication would be managed using OAuth2 with JWT for security and access control, ensuring that only authorized users can perform actions such as uploading and commenting. On the frontend, developed with Next.js and React, the application would offer a dynamic and responsive interface for users. The homepage would be designed to feature a variety of videos in a modern layout, with carousel and categorization features for easy content discovery. Each video would have a dedicated page, allowing real-time comments and integration with social networks for sharing. The video player would be highly customizable, supporting continuous playback, advanced playback controls, and subtitle support. Additionally, there would be a profile section for each user where they could manage their uploaded videos, subscriptions, and personalized playlists.
 Additional features would include a recommendation system powered by machine learning algorithms, which analyzes users' viewing behavior and preferences to suggest relevant videos. External APIs would be integrated for content optimization, performance analysis, and live streaming. The application architecture would be modular and scalable, prepared to handle a large volume of traffic and diverse video content.
technical_details=Web App project in two layers: Backend using FastAPI from python in conjunction with MariaDB as database and Frontend using NextJS from javascript. Unit and context tests of processes developed later as a complement to projects.
backend_technology=Python programming language, FastAPI framework and MariaDB database. All in their latest versions.
frontend_technology=Javascript programming language, NextJS framework consuming the FastAPI API. All in their latest versions.