{
  "pt-br": {
      "squad_leader_general_report_instructions": "Seja um bom analista de requisitos e crie um relatório bem completo. Com base no relatório do analista acima, gere um relatório geral do projeto, abordando todos os aspectos relevantes: Backend, Frontend e Testes: classes, funções e uso geral do framework escolhido conforme relatório acima, bem como todas as tarefas associadas.",
      "backend_backlog_model": "MODELO DE BACKLOG BACKEND\n\n**Criar Arquivos, Pastas, Classes e Funções**\n\n001. # models/example.model.py: Define o modelo de dados de exemplo.\n   *  Classe Example: Define o modelo de dados de exemplo.\n   *  Função validateExample(): Valida os dados de exemplo.\n002. ## controllers/example.controller.py: Controla operações relacionadas a exemplo.\n   *  Função createExample(): Cria um novo exemplo.\n   *  Função getExamples(): Obtém todos os exemplos.\n003. ## services/example.service.py: Serviços relacionados a exemplo.\n   *  Função processExample(): Processa os dados de exemplo.\n   *  Função getExampleDetails(): Recupera detalhes de um exemplo.\n004. ## repositories/example.repository.py: Repositórios de exemplo.\n   *  Função getExampleByID(): Recupera um exemplo pelo seu ID.\n   *  Função getAllExamples(): Recupera todos os exemplos.",
      "backend_instructions": "Com base no modelo e no relatório do Analista acima, gere o backlog de atividades de backend abordando tudo o que há pra ser desenvolvido no módulo de Backend: listar todos os arquivos e todas as classes e funções necessárias para o funcionamento completo do projeto. Seja bem específico e completo nesta geração, incluindo todas as pastas, arquivos, classes e funções necessárias. Gere um arquivo final de instruções contendo uma instrução por linha, podendo esta instrução ser de um dos dois tipos a seguir: 1o tipo: do tipo criar pasta e o nome da pasta na frente ou 2o tipo: do tipo criar arquivo, contendo o nome do arquivo e o detalhamento das funções que deve conter. Favor marcar o nome de cada arquivo com uma tag: ##nomde do arquivo: nome-do-arquivo.ext\n\nSiga a estrutura de tópicos e formatação do modelo com precisão, mas crie todas as atividades necessárias para atender a demanda do projeto. Tem que haver apenas um item superior começando com \"**Criar Arquivos, Pastas, Classes e Funções**\" e hierarquicamente abaixo instruções que contem os nomes das pastas e arquivos na forma: \"##pasta/arquivo.ext : explicação do arquivo\"  em apenas uma linha e por fim hierarquicamente abaixo, iniciado por \"*\" as funções, estruturas de dados e algoritmos de cada arquivo uma instrução por linha.",
      "frontend_backlog_model": "MODELO DE BACKLOG FRONTEND\n\n**Criar Arquivos, Pastas, Classes e Funções**\n\n001. ##models/example.model.js: Define o modelo de dados de exemplo.\n   *  Classe Example: Define o modelo de dados de exemplo.\n   *  Função validateExample(): Valida os dados de exemplo.\n002. ##controllers/example.controller.js: Controla operações relacionadas a exemplo.\n   *  Função createExample(): Cria um novo exemplo.\n   *  Função getExamples(): Obtém todos os exemplos.\n003. ##pages/example.page.js: Página de exemplo.\n   *  Função renderExamplePage(): Renderiza a página de exemplo.\n004. ##services/example.service.js: Serviços relacionados a exemplo.\n   *  Função processExample(): Processa os dados de exemplo.\n   *  Função getExampleDetails(): Recupera detalhes de um exemplo.",
      "frontend_instructions": "Com base no modelo e no relatório do Analista acima, gere o backlog de atividades de frontend abordando tudo o que há pra ser desenvolvido no módulo de Frontend: listar todos os arquivos e todas as classes e funções necessárias para o funcionamento completo do projeto. Seja bem específico e completo nesta geração, incluindo todas as pastas, arquivos, classes e funções necessárias. Gere um arquivo final de instruções contendo uma instrução por linha, podendo esta instrução ser de um dos dois tipos a seguir: 1o tipo: do tipo criar pasta e o nome da pasta na frente ou 2o tipo: do tipo criar arquivo, contendo o nome do arquivo e o detalhamento das funções que deve conter. Favor marcar o nome de cada arquivo com uma tag: ##nomde do arquivo: nome-do-arquivo.ext\n\nSiga a estrutura de tópicos e formatação do modelo com precisão, mas crie todas as atividades necessárias para atender a demanda do projeto. Tem que haver apenas um item superior começando com \"**Criar Arquivos, Pastas, Classes e Funções**\" e hierarquicamente abaixo instruções que contem os nomes das pastas e arquivos na forma: \"##pasta/arquivo.ext : explicação do arquivo\"  em apenas uma linha e por fim hierarquicamente abaixo, iniciado por \"*\" as funções, estruturas de dados e algoritmos de cada arquivo uma instrução por linha.",
      "tests_backlog_model": "MODELO DE BACKLOG DE TESTES\n\n**Criar Arquivos, Pastas, Classes e Funções**\n\n001. ##unit-tests/example.service.test.js: Arquivo para testar o serviço de exemplo do projeto.\n   *  Função exampleFunctionTest(): Testa uma função específica do serviço de exemplo.\n   *  Função anotherExampleFunctionTest(): Testa outra função específica do serviço de exemplo.\n002. ##integration-tests/example.integration.test.js: Arquivo para testar a integração do serviço de exemplo com o banco de dados.\n   *  Função exampleDBConnectionTest(): Testa a conexão do serviço de exemplo com o banco de dados.\n003. ##e2e-tests/example.e2e.test.js: Arquivo para testar o fluxo completo de uma funcionalidade de exemplo.\n   *  Função exampleFlowTest(): Testa o fluxo completo de uma funcionalidade de exemplo.\n004. ##mocks/example.mock.js: Arquivo para armazenar mocks do serviço de exemplo.\n   *  Função getExampleMock(): Retorna um mock do serviço de exemplo.\n005. ##utils/test-helpers.js: Arquivo para armazenar helpers e utilitários para os testes.\n   *  Função setupTestEnv(): Configura o ambiente de testes.\n   *  Função tearDownTestEnv(): Desmonta o ambiente de testes.",
      "tests_instructions": "Com base no modelo e no relatório do Analista acima, gere o backlog de atividades de testes abordando tudo o que há pra ser desenvolvido no módulo de Testes: listar todos os arquivos e todas as classes e funções necessárias para o funcionamento completo do projeto. Seja bem específico e completo nesta geração, incluindo todas as pastas, arquivos, classes e funções necessárias. Gere um arquivo final de instruções contendo uma instrução por linha, podendo esta instrução ser de um dos dois tipos a seguir: 1o tipo: do tipo criar pasta e o nome da pasta na frente ou 2o tipo: do tipo criar arquivo, contendo o nome do arquivo e o detalhamento das funções que deve conter. Favor marcar o nome de cada arquivo com uma tag: ##nomde do arquivo: nome-do-arquivo.ext\n\nSiga a estrutura de tópicos e formatação do modelo com precisão, mas crie todas as atividades necessárias para atender a demanda do projeto. Tem que haver apenas um item superior começando com \"**Criar Arquivos, Pastas, Classes e Funções**\" e hierarquicamente abaixo instruções que contem os nomes das pastas e arquivos na forma: \"##pasta/arquivo.ext : explicação do arquivo\"  em apenas uma linha e por fim hierarquicamente abaixo, iniciado por \"*\" as funções, estruturas de dados e algoritmos de cada arquivo uma instrução por linha."
  },
  "en-us": {
      "squad_leader_general_report_instructions": "Be a good requirements analyst and create a comprehensive report. Based on the analyst's report above, generate a general project report, covering all relevant aspects: Backend, Frontend, and Tests: classes, functions, and overall use of the chosen framework as per the above report, as well as all associated tasks.",
      "backend_backlog_model": "BACKEND BACKLOG TEMPLATE\n\n**Create Files, Folders, Classes, and Functions**\n\n001. # models/example.model.py: Defines the example data model.\n   *  Class Example: Defines the example data model.\n   *  Function validateExample(): Validates example data.\n002. ## controllers/example.controller.py: Controls example-related operations.\n   *  Function createExample(): Creates a new example.\n   *  Function getExamples(): Retrieves all examples.\n003. ## services/example.service.py: Services related to example.\n   *  Function processExample(): Processes example data.\n   *  Function getExampleDetails(): Retrieves details of an example.\n004. ## repositories/example.repository.py: Example repositories.\n   *  Function getExampleByID(): Retrieves an example by its ID.\n   *  Function getAllExamples(): Retrieves all examples.",
      "backend_instructions": "Based on the model and the Analyst's report above, generate the backend activity backlog addressing everything that needs to be developed in the Backend module: list all files and all the classes and functions necessary for the complete functioning of the project. Be very specific and complete in this generation, including all necessary folders, files, classes, and functions. Generate a final instruction file containing one instruction per line, which can be of one of the following two types: 1st type: create folder and the folder name in front or 2nd type: create file, containing the file name and detailing the functions it should contain. Please mark the name of each file with a tag: ##file name: file-name.ext\n\nFollow the template's outline and formatting precisely, but create all necessary activities to meet the project's demands. There should be only one main item starting with \"**Create Files, Folders, Classes, and Functions**\" and hierarchically below instructions containing the names of folders and files in the form: \"##folder/file.ext : file explanation\" in just one line and finally hierarchically below, starting with \"*\" the functions, data structures, and algorithms of each file one instruction per line.",
      "frontend_backlog_model": "FRONTEND BACKLOG TEMPLATE\n\n**Create Files, Folders, Classes, and Functions**\n\n001. ##models/example.model.js: Defines the example data model.\n   *  Class Example: Defines the example data model.\n   *  Function validateExample(): Validates example data.\n002. ##controllers/example.controller.js: Controls example-related operations.\n   *  Function createExample(): Creates a new example.\n   *  Function getExamples(): Retrieves all examples.\n003. ##pages/example.page.js: Example page.\n   *  Function renderExamplePage(): Renders the example page.\n004. ##services/example.service.js: Services related to example.\n   *  Function processExample(): Processes example data.\n   *  Function getExampleDetails(): Retrieves details of an example.",
      "frontend_instructions": "Based on the model and the Analyst's report above, generate the frontend activity backlog addressing everything that needs to be developed in the Frontend module: list all files and all the classes and functions necessary for the complete functioning of the project. Be very specific and complete in this generation, including all necessary folders, files, classes, and functions. Generate a final instruction file containing one instruction per line, which can be of one of the following two types: 1st type: create folder and the folder name in front or 2nd type: create file, containing the file name and detailing the functions it should contain. Please mark the name of each file with a tag: ##file name: file-name.ext\n\nFollow the template's outline and formatting precisely, but create all necessary activities to meet the project's demands. There should be only one main item starting with \"**Create Files, Folders, Classes, and Functions**\" and hierarchically below instructions containing the names of folders and files in the form: \"##folder/file.ext : file explanation\" in just one line and finally hierarchically below, starting with \"*\" the functions, data structures, and algorithms of each file one instruction per line.",
      "tests_backlog_model": "TESTS BACKLOG TEMPLATE\n\n**Create Files, Folders, Classes, and Functions**\n\n001. ##unit-tests/example.service.test.js: File to test the example service of the project.\n   *  Function exampleFunctionTest(): Tests a specific function of the example service.\n   *  Function anotherExampleFunctionTest(): Tests another specific function of the example service.\n002. ##integration-tests/example.integration.test.js: File to test the integration of the example service with the database.\n   *  Function exampleDBConnectionTest(): Tests the connection of the example service with the database.\n003. ##e2e-tests/example.e2e.test.js: File to test the complete flow of an example feature.\n   *  Function exampleFlowTest(): Tests the complete flow of an example feature.\n004. ##mocks/example.mock.js: File to store mocks of the example service.\n   *  Function getExampleMock(): Returns a mock of the example service.\n005. ##utils/test-helpers.js: File to store helpers and utilities for tests.\n   *  Function setupTestEnv(): Sets up the test environment.\n   *  Function tearDownTestEnv(): Tears down the test environment.",
      "tests_instructions": "Based on the model and the Analyst's report above, generate the tests activity backlog addressing everything that needs to be developed in the Tests module: list all files and all the classes and functions necessary for the complete functioning of the project. Be very specific and complete in this generation, including all necessary folders, files, classes, and functions. Generate a final instruction file containing one instruction per line, which can be of one of the following two types: 1st type: create folder and the folder name in front or 2nd type: create file, containing the file name and detailing the functions it should contain. Please mark the name of each file with a tag: ##file name: file-name.ext\n\nFollow the template's outline and formatting precisely, but create all necessary activities to meet the project's demands. There should be only one main item starting with \"**Create Files, Folders, Classes, and Functions**\" and hierarchically below instructions containing the names of folders and files in the form: \"##folder/file.ext : file explanation\" in just one line and finally hierarchically below, starting with \"*\" the functions, data structures, and algorithms of each file one instruction per line."
  }
}